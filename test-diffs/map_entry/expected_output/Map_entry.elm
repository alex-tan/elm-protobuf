module Map_entry exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: map_entry.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE
import Dict


uselessDeclarationToPreventErrorDueToEmptyOutputFile = 42

requiredWithoutDefault : String -> JD.Decoder a -> JD.Decoder (a -> b) -> JD.Decoder b
requiredWithoutDefault name decoder d =
    field (JD.field name decoder) d

requiredFieldEncoderWithoutDefault : String -> (a -> JE.Value) -> a -> Maybe ( String, JE.Value )
requiredFieldEncoderWithoutDefault name encoder v =
    Just ( name, encoder v )


type alias Bar =
    { field : Bool -- 1
    }


barDecoder : JD.Decoder Bar
barDecoder =
    JD.lazy <| \_ -> decode Bar
        |> required "field" JD.bool False


barEncoder : Bar -> JE.Value
barEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "field" JE.bool False v.field)
        ]


type alias Foo =
    { stringToBars : Dict.Dict String Bar -- 8
    , stringToStrings : Dict.Dict String String -- 7
    }


fooDecoder : JD.Decoder Foo
fooDecoder =
    JD.lazy <| \_ -> decode Foo
        |> mapEntries "stringToBars" barDecoder
        |> mapEntries "stringToStrings" JD.string


fooEncoder : Foo -> JE.Value
fooEncoder v =
    JE.object <| List.filterMap identity <|
        [ (mapEntriesFieldEncoder "stringToBars" barEncoder v.stringToBars)
        , (mapEntriesFieldEncoder "stringToStrings" JE.string v.stringToStrings)
        ]


type alias Foo_StringToBarsEntry =
    { key : String -- 1
    , value : Bar -- 2
    }


foo_StringToBarsEntryDecoder : JD.Decoder Foo_StringToBarsEntry
foo_StringToBarsEntryDecoder =
    JD.lazy <| \_ -> decode Foo_StringToBarsEntry
        |> required "key" JD.string ""
        |> requiredWithoutDefault "value" barDecoder


foo_StringToBarsEntryEncoder : Foo_StringToBarsEntry -> JE.Value
foo_StringToBarsEntryEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "key" JE.string "" v.key)
        , (requiredFieldEncoderWithoutDefault "value" barEncoder v.value)
        ]


type alias Foo_StringToStringsEntry =
    { key : String -- 1
    , value : String -- 2
    }


foo_StringToStringsEntryDecoder : JD.Decoder Foo_StringToStringsEntry
foo_StringToStringsEntryDecoder =
    JD.lazy <| \_ -> decode Foo_StringToStringsEntry
        |> required "key" JD.string ""
        |> required "value" JD.string ""


foo_StringToStringsEntryEncoder : Foo_StringToStringsEntry -> JE.Value
foo_StringToStringsEntryEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "key" JE.string "" v.key)
        , (requiredFieldEncoder "value" JE.string "" v.value)
        ]
