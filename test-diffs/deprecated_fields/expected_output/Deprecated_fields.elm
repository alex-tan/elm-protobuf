module Deprecated_fields exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: deprecated_fields.proto

import Protobuf exposing (..)
import Dict exposing (Dict)
import Json.Decode as JD
import Json.Encode as JE


uselessDeclarationToPreventErrorDueToEmptyOutputFile = 42

requiredWithoutDefault : String -> JD.Decoder a -> JD.Decoder (a -> b) -> JD.Decoder b
requiredWithoutDefault name decoder d =
    field (JD.field name decoder) d

requiredFieldEncoderWithoutDefault : String -> (a -> JE.Value) -> a -> Maybe ( String, JE.Value )
requiredFieldEncoderWithoutDefault name encoder v =
    Just ( name, encoder v )


type EnumBar
    = EnumbarValueDefault -- 0
    | EnumbarValue1 -- 1


enumBarDecoder : JD.Decoder EnumBar
enumBarDecoder =
    JD.map (Maybe.withDefault enumBarDefault << enumBarFromString) JD.string


enumBarDefault : EnumBar
enumBarDefault = EnumbarValueDefault


enumBarToString : EnumBar -> String
enumBarToString v =
    case v of
        EnumbarValueDefault ->
            "ENUMBAR_VALUE_DEFAULT"

        EnumbarValue1 ->
            "ENUMBAR_VALUE_1"


allEnumBar : List EnumBar
allEnumBar =[ EnumbarValueDefault, EnumbarValue1]

enumBarDict : Dict String EnumBar
enumBarDict =
    Dict.fromList <|
        List.map
            (\v -> ( enumBarToString v, v ))
            allEnumBar

enumBarFromString : String -> Maybe EnumBar
enumBarFromString s =
    Dict.get s enumBarDict

enumBarEncoder : EnumBar -> JE.Value
enumBarEncoder =
    JE.string << enumBarToString


type alias Bar =
    { field : Bool -- 1
    }


barDecoder : JD.Decoder Bar
barDecoder =
    JD.lazy <| \_ -> decode Bar
        |> required "field" JD.bool False


barEncoder : Bar -> JE.Value
barEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "field" JE.bool False v.field)
        ]
