module Forward exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: forward.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


uselessDeclarationToPreventErrorDueToEmptyOutputFile = 42


type alias MyEntity =
    { id : String -- 1
    , myChildEntityIds : List String -- 2
    }


myEntityDecoder : JD.Decoder MyEntity
myEntityDecoder =
    JD.lazy <| \_ -> decode MyEntity
        |> required "id" JD.string ""
        |> repeated "myChildEntityIds" JD.string


myEntityEncoder : MyEntity -> JE.Value
myEntityEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.string "" v.id)
        , (repeatedFieldEncoder "myChildEntityIds" JE.string v.myChildEntityIds)
        ]


type alias MyChildEntity =
    { id : String -- 1
    }


myChildEntityDecoder : JD.Decoder MyChildEntity
myChildEntityDecoder =
    JD.lazy <| \_ -> decode MyChildEntity
        |> required "id" JD.string ""


myChildEntityEncoder : MyChildEntity -> JE.Value
myChildEntityEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.string "" v.id)
        ]


type alias UnreferencedEntity =
    { id : String -- 1
    }


unreferencedEntityDecoder : JD.Decoder UnreferencedEntity
unreferencedEntityDecoder =
    JD.lazy <| \_ -> decode UnreferencedEntity
        |> required "id" JD.string ""


unreferencedEntityEncoder : UnreferencedEntity -> JE.Value
unreferencedEntityEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.string "" v.id)
        ]


type alias SelfReferencing =
    { id : String -- 1
    , selfReferencingId : String -- 2
    }


selfReferencingDecoder : JD.Decoder SelfReferencing
selfReferencingDecoder =
    JD.lazy <| \_ -> decode SelfReferencing
        |> required "id" JD.string ""
        |> required "selfReferencingId" JD.string ""


selfReferencingEncoder : SelfReferencing -> JE.Value
selfReferencingEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.string "" v.id)
        , (requiredFieldEncoder "selfReferencingId" JE.string "" v.selfReferencingId)
        ]


type alias OverrideName =
    { id : String -- 1
    , referenceByOtherName : String -- 2
    , manyReferencesByOtherName : List String -- 3
    }


overrideNameDecoder : JD.Decoder OverrideName
overrideNameDecoder =
    JD.lazy <| \_ -> decode OverrideName
        |> required "id" JD.string ""
        |> required "referenceByOtherName" JD.string ""
        |> repeated "manyReferencesByOtherName" JD.string


overrideNameEncoder : OverrideName -> JE.Value
overrideNameEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "id" JE.string "" v.id)
        , (requiredFieldEncoder "referenceByOtherName" JE.string "" v.referenceByOtherName)
        , (repeatedFieldEncoder "manyReferencesByOtherName" JE.string v.manyReferencesByOtherName)
        ]


type alias MessageWithoutId =
    { noIdHere : String -- 1
    }


messageWithoutIdDecoder : JD.Decoder MessageWithoutId
messageWithoutIdDecoder =
    JD.lazy <| \_ -> decode MessageWithoutId
        |> required "noIdHere" JD.string ""


messageWithoutIdEncoder : MessageWithoutId -> JE.Value
messageWithoutIdEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "noIdHere" JE.string "" v.noIdHere)
        ]
