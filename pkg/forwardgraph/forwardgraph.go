package forwardgraph

import (
	"bytes"
	"fmt"
	"github.com/thematthopkins/elm-protobuf/pkg/parsepb"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"

	"text/template"
)

func Generate(inFile *descriptorpb.FileDescriptorProto, messages []parsepb.PbMessage) (*pluginpb.CodeGeneratorResponse_File, error) {
	t := template.New("t")

	t, err := t.Parse(`module DomainNew.Graph exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: {{ .SourceFile }}


import ForwardNew.Interface.Cache as Cache
import ForwardNew.Lookup as Lookup exposing (Lookup)
import Ids
import Json.Decode as Decode
import LocalExtra.Lookup as LookupExtra
import Pb

allDecoders : List Lookup.DecoderConfig
allDecoders = [
{{ range $index, $element := .Decoders}}
	{{if $index}},{{end}}
	{{ $element.LowerName }}
{{end}}
]

{{ range .Decoders}}
{{ .LowerName }} : Lookup Ids.{{ .UpperName }} Pb.{{ .UpperName }}
{{ .LowerName }} =
    Lookup.defineNode
        { entrypoint = "{{ .Entrypoint }}"
        , parameters = {{ .Parameters }}
        , decoder = Pb.{{ .LowerName }}
        , cacheKey = Cache.{{ .LowerName }}
        }
{{end}}
`)
	if err != nil {
		return nil, err
	}

	messages_with_ids := parsepb.MessagesWithIds(messages)
	decoders := GetDecoders(messages_with_ids)

	buff := &bytes.Buffer{}
	if err = t.Execute(buff, struct {
		SourceFile string
		Decoders   []Decoder
	}{
		SourceFile: inFile.GetName(),
		Decoders:   decoders,
	}); err != nil {
		return nil, err
	}

	fileName := "DomainNew/Graph.elm"
	result := buff.String()
	return &pluginpb.CodeGeneratorResponse_File{
		Name:    &fileName,
		Content: &result,
	}, nil
}

type Decoder struct {
	UpperName  string
	LowerName  string
	Entrypoint string
	Parameters string
	Decoder    string
	CacheKey   string
}

func GetDecoders(messages []parsepb.PbMessage) []Decoder {
	result := []Decoder{}

	for _, m := range messages {
		result = append(result, Decoder{
			UpperName:  (string)(m.TypeAlias.Name),
			LowerName:  m.TypeAlias.LowerName,
			Entrypoint: (string)(m.TypeAlias.Name),
			Parameters: fmt.Sprintf("LookupExtra.idParam (\\(Ids.%s id) -> id)", m.TypeAlias.Name),
			Decoder:    fmt.Sprintf("Pb.%s", m.TypeAlias.Decoder),
			CacheKey:   fmt.Sprintf("Cache.%s", m.TypeAlias.LowerName),
		})
	}

	return result
}
