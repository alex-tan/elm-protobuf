package forwardcache

import (
	"bytes"
	"github.com/thematthopkins/elm-protobuf/pkg/parsepb"
	"google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/pluginpb"

	"text/template"
)

func Generate(inFile *descriptorpb.FileDescriptorProto, messages []parsepb.PbMessage) (*pluginpb.CodeGeneratorResponse_File, error) {
	t := template.New("t")

	t, err := t.Parse(`module ForwardNew.Interface.Cache exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: {{ .SourceFile }}

import ForwardNew.CacheKey exposing (CacheKey, cacheKey)
import ForwardNew.EntrypointCache as EntrypointCache exposing (EntrypointCache)
import Ids
import Pb

type alias Cache = {
{{ range $index, $element := .Messages}}
	{{if $index}},{{end}}
	{{$element.TypeAlias.LowerName}} : EntrypointCache Pb.{{$element.TypeAlias.Name}}
{{end}}
}

empty : Cache
empty =
{
{{ range $index, $element := .Messages}}
	{{if $index}},{{end}}
	{{$element.TypeAlias.LowerName}} = EntrypointCache.empty
{{end}}
}

importedCarrier : CacheKey Cache Pb.ImportedCarrier
importedCarrier =
    cacheKey .importedCarrier (\e c -> { c | importedCarrier = e })


list_idsFactoringCompany : CacheKey Cache (List Ids.FactoringCompany)
list_idsFactoringCompany =
    cacheKey .list_idsFactoringCompany (\e c -> { c | list_idsFactoringCompany = e })

{{ range .Messages}}

{{.TypeAlias.LowerName}} : CacheKey Cache Pb.{{.TypeAlias.Name}}
{{.TypeAlias.LowerName}} =
    cacheKey .{{.TypeAlias.LowerName}} (\e c -> { c | {{.TypeAlias.LowerName}} = e })

{{end}}

{{ range .Messages}}

list_ids{{.TypeAlias.Name}} : CacheKey Cache (List Ids.{{.TypeAlias.Name}})
list_ids{{.TypeAlias.Name}} =
    cacheKey .list_ids{{.TypeAlias.Name}} (\e c -> { c | list_ids{{.TypeAlias.Name}} = e })

{{end}}
`)
	if err != nil {
		return nil, err
	}

	messages_with_ids := parsepb.MessagesWithIds(messages)

	buff := &bytes.Buffer{}
	if err = t.Execute(buff, struct {
		SourceFile string
		Messages   []parsepb.PbMessage
	}{
		SourceFile: inFile.GetName(),
		Messages:   messages_with_ids,
	}); err != nil {
		return nil, err
	}

	fileName := "ForwardNew/Interface/Cache.elm"
	result := buff.String()
	return &pluginpb.CodeGeneratorResponse_File{
		Name:    &fileName,
		Content: &result,
	}, nil
}
